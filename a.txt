1


/*

What will happen? Compilation error or runtime output? How do we fix it?

*/


class Demo {
    final int x = 10;
    public static void main(String[] args) {
        Demo d = new Demo();
        // d.x = 20; // try to change
        System.out.println(d.x);
    }
}


/*


Will it print and then update? Or fail?

*/
class Constants {
    final double PI = 3.14159;
    public static void main(String[] args) {
        Constants c = new Constants();
        System.out.println(c.PI);
        c.PI = 22.7; // modify?
    }
}


/*

Will Childâ€™s display run or will there be an error?

*/

class Parent {
    final void display() {
        System.out.println("Parent display");
    }
}
class Child extends Parent {
    void display() {  // attempt override
        System.out.println("Child display");
    }
}
public class Main {
    public static void main(String[] args) {
        new Child().display();
    }
}



/*



Will it compile? If not, why?

*/
final class Vehicle {
    void run() { System.out.println("Vehicle running"); }
}
class Car extends Vehicle {  // try inheritance
    void run() { System.out.println("Car running"); }
}
public class Test {
    public static void main(String[] args) {
        new Car().run();
    }
}



/*
Will this compile? If not, how should we fix it?


*/
class Student {
    final int rollNo;
    Student(int r) {
        // rollNo not initialized
    }
    void show() {
        System.out.println("RollNo = " + rollNo);
    }
}
public class Test {
    public static void main(String[] args) {
        Student s = new Student(101);
        s.show();
    }
}



/*

Will it compile? Where should we initialize PORT?
*/

class Config {
    static final int PORT;
    Config() {
        PORT = 8080; // attempt in constructor
    }
}
public class Main {
    public static void main(String[] args) {
        System.out.println(Config.PORT);
    }
}


/*

What happens when you try to reassign x?

*/

class Calculator {
    int add(final int x, final int y) {
        x = x + 1; // try to reassign
        return x + y;
    }
}
public class Test {
    public static void main(String[] args) {
        Calculator c = new Calculator();
        System.out.println(c.add(3, 4));
    }
}


/*
Can we make the Book class truly immutable? What else should we add? 


*/
class Book {
    final String title = "Java";
}
public class Main {
    public static void main(String[] args) {
        Book b = new Book();
        b.title = "Python"; // try to change
        System.out.println(b.title);
    }
}



/*

 Can a malicious subclass override the method? What happens here? 

*/
final class BankAccount {
    final void showBalance() {
        System.out.println("Showing balance securely");
    }
}
class FakeAccount extends BankAccount {  // attempt subclass
    void showBalance() {
        System.out.println("Fake balance");
    }
}
public class Main {
    public static void main(String[] args) {
        new FakeAccount().showBalance();
    }
}



/*
 Why is it useful for readability to mark MAX_PAGES as final?


*/

class Report {
    final int MAX_PAGES = 50;
    void printReport(int pages) {
        if (pages > MAX_PAGES)
            System.out.println("Too many pages");
        else
            System.out.println("Printing " + pages + " pages");
    }
}
public class Main {
    public static void main(String[] args) {
        Report r = new Report();
        r.printReport(30);
        r.MAX_PAGES = 100; // try changing
    }
}

